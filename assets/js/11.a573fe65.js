(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{501:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"一-思想过渡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-思想过渡"}},[s._v("#")]),s._v(" 一.思想过渡")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("前言：明确地说，学了C语言就相当于学了 C++ 的一半，从C语言转向 C++ 时，不需要再从头开始，接着C语言往下学就可以，所以我强烈建议先学C语言再学 C++。")])]),t("h2",{attrs:{id:"_1-面向过程与面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-面向过程与面向对象"}},[s._v("#")]),s._v(" 1.面向过程与面向对象")]),s._v(" "),t("p",[s._v("​\t从“学院派”的角度来说，C++ 支持面向过程编程、面向对象编程和泛型编程，而C语言仅支持面向过程编程。就面向过程编程而言，C++ 和C几乎是一样的，所以学习了C语言，也就学习了 C++ 的一半，不需要从头再来。")]),s._v(" "),t("p",[s._v("面向过程（POP）：")]),s._v(" "),t("ul",[t("li",[s._v("以过程(Procedure)为中心的编程方式")]),s._v(" "),t("li",[s._v("按照计算机执行的步骤，按从上到下顺序设计程序")])]),s._v(" "),t("p",[s._v("面向对象（OOP）：")]),s._v(" "),t("ul",[t("li",[s._v("以对象 （Object）为核心的编程范式")]),s._v(" "),t("li",[s._v("对象是类(Class)的实例，类中包括了数据的定义和对数据的操作方法")])]),s._v(" "),t("h2",{attrs:{id:"_2-类和对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-类和对象"}},[s._v("#")]),s._v(" 2.类和对象")]),s._v(" "),t("p",[s._v("​\tC++是一门面向对象的编程语言，理解 C++，首先要理解**类（Class）"),t("strong",[s._v("和")]),s._v("对象（Object）**这两个概念。")]),s._v(" "),t("p",[s._v("​\tC++ 中的类（Class）可以看做C语言中结构体（"),t("code",[s._v("Struct")]),s._v("）的升级版。结构体是一种构造类型，可以包含若干成员变量，每个成员变量的类型可以不同；可以通过结构体来定义结构体变量，每个变量拥有相同的性质。")]),s._v(" "),t("p",[s._v("​\tC++ 中的类也是一种构造类型，但是进行了一些扩展，类的成员不但可以是变量，还可以是函数；通过类定义出来的变量也有特定的称呼，叫做“对象”。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//通过class关键字类定义类")]),s._v("\nclass Student"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\npublic"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//类包含的变量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//类包含的函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("say")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s的年龄是 %d，成绩是 %f\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//通过类来定义变量，即创建对象")]),s._v("\n    class Student stu1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//也可以省略关键字class")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//为类的成员变量赋值")]),s._v("\n    stu1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小明"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    stu1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    stu1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("score "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("92.5f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//调用类的成员函数")]),s._v("\n    stu1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("say")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("​\tC语言中的 "),t("code",[s._v("struct")]),s._v("只能包含变量，而 C++ 中的 class 除了可以包含变量，还可以包含函数。display() 是用来处理成员变量的函数，在C语言中，我们将它放在了"),t("code",[s._v("struct Student")]),s._v("外面，它和成员变量是分离的；而在 C++ 中，我们将它放在了 class Student 内部，使它和成员变量聚集在一起，看起来更像一个整体。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：对于熟悉 C++ 的读者，这段代码并不规范，请忽略这一细节，主要是从C到C++过渡。")])]),s._v(" "),t("p",[s._v("​\t结构体和类都可以看做一种由用户自己定义的复杂数据类型，在C语言中可以通过结构体名来定义变量，在 C++ 中可以通过类名来定义变量。不同的是，通过结构体定义出来的变量还是叫"),t("strong",[s._v("变量")]),s._v("，而通过类定义出来的变量有了新的名称，叫做"),t("strong",[s._v("对象")]),s._v("（Object）。")]),s._v(" "),t("p",[s._v("​\t在 C++ 中，通过类名就可以创建对象，即将图纸生产成零件，这个过程叫做类的实例化，因此也称对象是类的一个实例（Instance）。有些资料也将类的成员变量称为"),t("strong",[s._v("属性")]),s._v("（Property），将类的成员函数称为"),t("strong",[s._v("方法")]),s._v("（Method）。")]),s._v(" "),t("h1",{attrs:{id:"二-命名空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-命名空间"}},[s._v("#")]),s._v(" 二.命名空间")]),s._v(" "),t("h2",{attrs:{id:"_1-原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-原因"}},[s._v("#")]),s._v(" 1.原因")]),s._v(" "),t("p",[s._v("​\t一个中大型软件往往由多名程序员共同开发，会使用大量的变量和函数，不可避免地会出现变量或函数的命名冲突。当所有人的代码都测试通过，没有问题时，将它们结合到一起就有可能会出现命名冲突。")]),s._v(" "),t("p",[s._v("​\t例如小李和小韩都参与了一个文件管理系统的开发，它们都定义了一个全局变量"),t("code",[s._v("fp")]),s._v("，用来指明当前打开的文件，将他们的代码整合在一起编译时，很明显编译器会提示"),t("code",[s._v("fp")]),s._v("重复定义（Redefinition）错误。")]),s._v(" "),t("p",[s._v("​\t为了解决合作开发时的命名冲突问题，C++引入了"),t("strong",[s._v("命名空间")]),s._v("的概念：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("namespace Li"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//小李的变量定义")]),s._v("\n    FILE"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nnamespace Han"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//小韩的变量定义")]),s._v("\n    FILE"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"_2-语法格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-语法格式"}},[s._v("#")]),s._v(" 2.语法格式")]),s._v(" "),t("p",[t("code",[s._v("namespace")]),s._v(" 是C++中的关键字，用来定义一个命名空间，语法格式为：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("namespace name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//variables, functions, classes           //在这里面可以定义自己使用的任意变量、类、对象、函数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("code",[s._v("name")]),s._v("是命名空间的名字，它里面可以包含变量、函数、类、typedef、#define 等，最后由"),t("code",[s._v("{ }")]),s._v("包围。")]),s._v(" "),t("p",[s._v("使用变量、函数时要指明它们所在的命名空间。以上面的"),t("code",[s._v("fp")]),s._v("变量为例，可以这样来使用：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("Li"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("fp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fopen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one.txt"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"r"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用小李定义的变量 fp")]),s._v("\nHan"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("fp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fopen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"two.txt"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rb+"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用小韩定义的变量 fp")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v("::")]),s._v("是一个新符号，称为域解析操作符，在C++中用来指明要使用的命名空间。")]),s._v(" "),t("p",[s._v("除了直接使用域解析操作符，还可以采用 "),t("code",[s._v("using")]),s._v(" 关键字声明：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("using Li"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("fp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nfp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fopen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one.txt"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"r"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用小李定义的变量 fp")]),s._v("\nHan "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v(" fp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fopen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"two.txt"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rb+"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用小韩定义的变量 fp")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("code",[s._v("using")]),s._v(" 声明以后的程序中如果出现了未指明命名空间的"),t("code",[s._v("fp")]),s._v("，就使用 "),t("code",[s._v("Li::fp")]),s._v("；但是若要使用小韩定义的"),t("code",[s._v("fp")]),s._v("，仍然需要"),t("code",[s._v("Han::fp")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("using")]),s._v(" 声明不仅可以针对命名空间中的一个变量，也可以用于声明整个命名空间：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("using namespace Li"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nfp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fopen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one.txt"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"r"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用小李定义的变量 fp")]),s._v("\nHan"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("fp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fopen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"two.txt"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rb+"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用小韩定义的变量 fp")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("在 "),t("code",[s._v("using")]),s._v("声明后，如果有未具体指定命名空间的变量产生了命名冲突，那么默认采用命名空间 Li 中的变量。")]),s._v(" "),t("h2",{attrs:{id:"_3-标准命名空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-标准命名空间"}},[s._v("#")]),s._v(" 3.标准命名空间")]),s._v(" "),t("p",[s._v("​\tC++是在C语言的基础上开发的，早期的 C++ 还不完善，不支持命名空间，没有自己的编译器，而是将 C++ 代码翻译成C代码，再通过C编译器完成编译。这个时候的 C++ 仍然在使用C语言的库，"),t("code",[s._v("stdio.h")]),s._v("、"),t("code",[s._v("stdlib.h")]),s._v("、"),t("code",[s._v("string.h")]),s._v("等头文件依然有效；此外 C++ 也开发了一些新的库，增加了自己的头文件。")]),s._v(" "),t("p",[s._v("​\t和C语言一样，C++ 头文件仍然以"),t("code",[s._v(".h")]),s._v("为后缀，它们所包含的类、函数、宏等都是全局范围的。后来 C++ 引入了命名空间的概念，计划重新编写库，将类、函数、宏等都统一纳入一个命名空间，这个命名空间的名字就是"),t("code",[s._v("std")]),s._v("。")]),s._v(" "),t("p",[s._v("​\t理论上可以发现，对于不带"),t("code",[s._v(".h")]),s._v("的头文件，所有的符号都位于命名空间 std 中，使用时需要声明命名空间 std；对于带"),t("code",[s._v(".h")]),s._v("的头文件，没有使用任何命名空间，所有符号都位于全局作用域。这也是 C++ 标准所规定的。")]),s._v(" "),t("p",[s._v("​\t下面是一个完整使用C++头文件和命名空间的例子：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<string>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*如果在这里使用using namespace std; 那么代表这整个.cpp的文件都是std下的，这对于我们平时练习一个的.cpp文件没有区别\n但如果是在多个.cpp文件构成的项目中或者一个.cpp文件类需要用到多个命名空间时，还是写在函数内部比较好*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//声明命名空间std")]),s._v("\n    using namespace std"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义字符串变量")]),s._v("\n    string str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义 int 变量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//从控制台获取用户输入")]),s._v("\n    cin "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将数据输出到控制台")]),s._v("\n    cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"已经"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"岁了！"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("​\t将 std 直接声明在所有函数外部，这样虽然使用方便，但在中大型项目开发中是不被推荐的，这样做增加了命名冲突的风险，我推荐在函数内部声明 std。")]),s._v(" "),t("h1",{attrs:{id:"三-操作转变"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-操作转变"}},[s._v("#")]),s._v(" 三.操作转变")]),s._v(" "),t("h2",{attrs:{id:"_1-输入与输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-输入与输出"}},[s._v("#")]),s._v(" 1.输入与输出")]),s._v(" "),t("p",[s._v("​\t在C语言中，我们通常会使用"),t("code",[s._v("scanf")]),s._v(" 和"),t("code",[s._v("printf")]),s._v("来对数据进行输入输出操作，在编写 C++ 程序时，如果需要使用输入输出时，则需要包含头文件"),t("code",[s._v("iostream")]),s._v("，它包含了用于输入输出的对象，例如常见的"),t("code",[s._v("cin")]),s._v("表示标准输入、"),t("code",[s._v("cout")]),s._v("表示标准输出、"),t("code",[s._v("cerr")]),s._v("表示标准错误。")]),s._v(" "),t("p",[s._v("​\tcout 和 cin 都是 C++ 的内置对象，而不是关键字。C++ 库定义了大量的类（Class），程序员可以使用它们来创建对象，cout 和 cin 就分别是 "),t("code",[s._v("ostream")]),s._v(" 和 "),t("code",[s._v("istream")]),s._v("类的对象，只不过它们是由标准库的开发者提前创建好的，可以直接拿来使用。这种在 C++ 中提前创建好的对象称为"),t("strong",[s._v("内置对象")]),s._v("。")]),s._v(" "),t("p",[s._v("​\t使用 "),t("code",[s._v("cout")]),s._v(" 进行输出时需要紧跟"),t("code",[s._v("<<")]),s._v("运算符，使用"),t("code",[s._v("cin")]),s._v(" 进行输入时需要紧跟"),t("code",[s._v(">>")]),s._v("运算符，这两个运算符可以自行分析所处理的数据类型，因此无需像使用"),t("code",[s._v("scanf")]),s._v(" 和 "),t("code",[s._v("printf")]),s._v("那样给出格式控制字符串。")]),s._v(" "),t("h2",{attrs:{id:"_2-布尔类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-布尔类型"}},[s._v("#")]),s._v(" 2.布尔类型")]),s._v(" "),t("p",[s._v("​\tC语言并没有彻底从语法上支持“真”和“假”，只是用 0 和非 0 来代表。这点在 C++ 中得到了改善，C++ 新增了"),t("code",[s._v("bool")]),s._v("类型（布尔类型），它一般占用 1 个字节长度。"),t("code",[s._v("bool")]),s._v(" 类型只有两个取值，"),t("code",[s._v("true")]),s._v(" 和"),t("code",[s._v("false")]),s._v("："),t("code",[s._v("true")]),s._v(" 表示“真”，"),t("code",[s._v("false")]),s._v(" 表示“假”。")]),s._v(" "),t("p",[s._v("​\t遗憾的是，在 C++ 中使用 "),t("code",[s._v("cout")]),s._v(" 输出 "),t("code",[s._v("bool")]),s._v(" 变量的值时还是用数字 1 和 0 表示，而不是 true 或 false。但你也可以使用 true 或 false 显式地对 "),t("code",[s._v("bool")]),s._v("变量赋值。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：虽然我们平时写C语言代码时，习惯了"),t("code",[s._v("bool")]),s._v("类型，但是在标准的只有C语言的IDE中如果运行包含"),t("code",[s._v("bool")]),s._v("类型的代码是会报错的，C语言并不支持"),t("code",[s._v("bool")]),s._v("类型，只不过我们平时用的都是"),t("code",[s._v(".cpp")]),s._v("文件格式写的是C语言，所以正确来说是C语言和C++的结合版本，那么C语言中的"),t("code",[s._v("true")]),s._v("和"),t("code",[s._v("false")]),s._v("怎么表示呢？用"),t("code",[s._v("int")]),s._v("类型即可，>0表示真，=0表示假。")])]),s._v(" "),t("h2",{attrs:{id:"_3-动态分配空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-动态分配空间"}},[s._v("#")]),s._v(" 3.动态分配空间")]),s._v(" "),t("p",[s._v("在C语言中，动态分配内存用 "),t("code",[s._v("malloc()")]),s._v("函数，释放内存用 free() 函数。如下所示：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("malloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//分配10个int型的内存空间")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//释放内存")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("在C++中，这两个函数仍然可以使用，但是C++又新增了两个关键字，"),t("code",[s._v("new")]),s._v("和 "),t("code",[s._v("delete")]),s._v("："),t("code",[s._v("new")]),s._v("用来动态分配内存，"),t("code",[s._v("delete")]),s._v("用来释放内存。")]),s._v(" "),t("p",[s._v("用 new 和 delete 分配内存更加简单：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" new "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//分配1个int型的内存空间")]),s._v("\ndelete p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//释放内存")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如果希望分配一组连续的数据，可以使用 new[]：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" new "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//分配10个int型的内存空间")]),s._v("\ndelete"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("和 "),t("code",[s._v("malloc()")]),s._v("一样，"),t("code",[s._v("new")]),s._v(" 也是在堆区分配内存，必须手动释放，否则只能等到程序运行结束由操作系统回收。为了避免内存泄露，通常"),t("code",[s._v("new")]),s._v("和"),t("code",[s._v("delete")]),s._v("、"),t("code",[s._v("new[]")]),s._v("和"),t("code",[s._v("delete[]")]),s._v("操作符应该成对出现，并且不要和C语言中 "),t("code",[s._v("malloc()")]),s._v("、"),t("code",[s._v("free()")]),s._v(" 一起混用。")]),s._v(" "),t("h1",{attrs:{id:"四-const用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-const用法"}},[s._v("#")]),s._v(" 四."),t("code",[s._v("const")]),s._v("用法")]),s._v(" "),t("h2",{attrs:{id:"_1-修饰全局变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-修饰全局变量"}},[s._v("#")]),s._v(" 1.修饰全局变量")]),s._v(" "),t("p",[s._v("​\t  关键字"),t("code",[s._v("const")]),s._v("用来定义常量，如果一个变量被"),t("code",[s._v("const")]),s._v("修饰，那么它的值就不能再被改变，我们通常称这样的变量为"),t("strong",[s._v("常量")]),s._v("。由于常量一旦被创建后其值就不能再改变，所以常量必须在定义的同时赋值（初始化），后面的任何赋值行为都将引发错误。")]),s._v(" "),t("p",[s._v("​\t 我们知道，在C语言中普通全局变量的作用域是当前文件，但是在其他文件中也是可见的，使用"),t("code",[s._v("extern")]),s._v("声明后就可以使用：")]),s._v(" "),t("p",[s._v("代码段1（源文件1）：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"main: %d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("代码段2（源文件2）：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extern")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"module: %d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("不管是以C还是C++的方式编译，运行结果都是：")]),s._v(" "),t("blockquote",[t("p",[s._v("module: 10\nmain: 10")])]),s._v(" "),t("p",[s._v("​\t在C语言中，"),t("code",[s._v("const")]),s._v("变量和普通变量一样，在其他源文件中也是可见的。修改代码段1，在 n 的定义前面加"),t("code",[s._v("const")]),s._v("限制，如下所示：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("​\t修改后的代码仍然能够正确编译，运行结果和上面也是一样的。这说明C语言中的 "),t("code",[s._v("const")]),s._v("变量在多文件编程时的表现和普通变量一样，除了不能修改，没有其他区别。")]),s._v(" "),t("p",[s._v("​\t但是如果按照C++的方式编译（将源文件后缀设置为"),t("code",[s._v(".cpp")]),s._v("），修改后的代码就是错误的。这是因为 C++ 对 "),t("code",[s._v("const")]),s._v(" 的特性做了调整，C++ 规定，全局 "),t("code",[s._v("const")]),s._v(" 变量的作用域仍然是当前文件，但是它在其他文件中是不可见的，这和添加了"),t("code",[s._v("static")]),s._v("关键字的效果类似。虽然代码段2中使用 extern 声明了变量 n，但是在链接时却找不到代码段1中的 n。")]),s._v(" "),t("blockquote",[t("p",[s._v("因为C++中全局 "),t("code",[s._v("const")]),s._v("变量的可见范围是当前文件，所以如果在C++中要使用同一项目下其他"),t("code",[s._v(".cpp")]),s._v("文件定义的全局变量（被"),t("code",[s._v("const")]),s._v("修饰），那么可以把"),t("code",[s._v("const")]),s._v("修饰的变量定义在头文件（.h文件中）通过引入头文件的方式来解决该类问题。")])]),s._v(" "),t("h2",{attrs:{id:"_2-常量指针与指针常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-常量指针与指针常量"}},[s._v("#")]),s._v(" 2.常量指针与指针常量")]),s._v(" "),t("p",[t("strong",[s._v("常量指针")]),s._v("是指针指向的内容是常量，可以有一下两种定义方式：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这是因为"),t("code",[s._v("type")]),s._v("和"),t("code",[s._v("const")]),s._v("是可以互换位置的，需要注意以下两点：")]),s._v(" "),t("ul",[t("li",[s._v("1.常量指针指向的值不能改变，但是这并不是意味着指针本身不能改变，常量指针可以指向其他的地址。")]),s._v(" "),t("li",[s._v("2.常量指针说的是不能通过这个指针改变变量的值，但是还是可以通过其他的引用来改变变量的值的。")])]),s._v(" "),t("p",[t("strong",[s._v("指针常量")]),s._v("是指指针本身是个常量，不能在指向其他的地址，写法如下：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("需要注意的是，指针常量指向的地址不能改变，但是地址中保存的数值是可以改变的，可以通过其他指向改地址的指针来修改。")]),s._v(" "),t("blockquote",[t("p",[s._v("小技巧：区分常量指针和指针常量的关键就在于星号的位置，我们以星号为分界线，如果"),t("code",[s._v("const")]),s._v("在星号的左边，则为常量指针，如果"),t("code",[s._v("const")]),s._v("在星号的右边则为指针常量。如果我们将星号读作‘指针’，将"),t("code",[s._v("const")]),s._v("读作‘常量’的话，内容正好符合。"),t("code",[s._v("int const * n；")]),s._v("是常量指针，"),t("code",[s._v("int *const n；")]),s._v("是指针常量。")])]),s._v(" "),t("h2",{attrs:{id:"_3-修饰函数参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-修饰函数参数"}},[s._v("#")]),s._v(" 3.修饰函数参数")]),s._v(" "),t("p",[t("code",[s._v("const")]),s._v("通常用在函数形参中，如果形参是一个指针，为了"),t("strong",[s._v("防止在函数内部修改指针指向的数据")]),s._v("（该数据既可以是变量也可以是地址，取决于你使用的是常量指针还是指针常量），就可以用 "),t("code",[s._v("const")]),s._v("来限制。")]),s._v(" "),t("h2",{attrs:{id:"_4-内存角度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-内存角度"}},[s._v("#")]),s._v(" 4.内存角度")]),s._v(" "),t("p",[s._v("先来看下面的两条语句：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("​\t我们知道，变量是要占用内存的，即使被 "),t("code",[s._v("const")]),s._v("修饰也不例外。m、n 两个变量占用不同的内存，"),t("code",[s._v("int n = m;")]),s._v("表示将 m 的值赋给 n，这个赋值的过程在C和C++中是有区别的。")]),s._v(" "),t("p",[s._v("​\t在C语言中，编译器会先到 m 所在的内存取出一份数据，再将这份数据赋给 n；而在C++中，编译器会直接将 10 赋给 n，没有读取内存的过程，和"),t("code",[s._v("int n = 10;")]),s._v("的效果一样。C++ 中的常量更类似于"),t("code",[s._v("#define")]),s._v("命令，是一个值替换的过程，只不过"),t("code",[s._v("#define")]),s._v("是在预处理阶段替换，而常量是在编译阶段替换。")]),s._v(" "),t("p",[s._v("​\tC++ 对"),t("code",[s._v("const")]),s._v("的处理少了读取内存的过程，优点是提高了程序执行效率，缺点是不能反映内存的变化，一旦 const 变量被修改，C++ 就不能取得最新的值。")]),s._v(" "),t("h1",{attrs:{id:"五-函数角度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-函数角度"}},[s._v("#")]),s._v(" 五.函数角度")]),s._v(" "),t("h2",{attrs:{id:"_1-内联函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-内联函数"}},[s._v("#")]),s._v(" 1.内联函数")]),s._v(" "),t("p",[s._v("​\t为了消除函数调用的时空开销，C++ 提供一种提高效率的方法，即在编译时将函数调用处用函数体替换，类似于C语言中的宏展开。这种在函数调用处直接嵌入函数体的函数称为"),t("strong",[s._v("内联函数")]),s._v("，又称"),t("strong",[s._v("内嵌函数")]),s._v("或者"),t("strong",[s._v("内置函数")]),s._v("。")]),s._v(" "),t("p",[s._v("​\t指定内联函数的方法很简单，只需要在函数定义处增加 "),t("code",[s._v("inline")]),s._v(" 关键字。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意，要在函数定义处添加"),t("code",[s._v("inline")]),s._v("关键字，在函数声明处添加 "),t("code",[s._v("inline")]),s._v("关键字虽然没有错，但这种做法是无效的，编译器会忽略函数声明处的 "),t("code",[s._v("inline")]),s._v("关键字。")])]),s._v(" "),t("p",[s._v("​\t内联函数的另一个最大用处是替换宏：在C语言中我们置断宏是可以带参数的，它在形式上和函数非常相似。不过不像函数，宏仅仅是"),t("strong",[s._v("字符串替换")]),s._v("，不是"),t("strong",[s._v("按值传递")]),s._v("，所以在编写宏时要特别注意，一不小心可能就会踩坑。如果我们将宏替换为内联函数，情况就没有那么复杂了，通过内联函数来解决宏的按值传递问题是一个常见的用法。")]),s._v(" "),t("h2",{attrs:{id:"_2-默认参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-默认参数"}},[s._v("#")]),s._v(" 2.默认参数")]),s._v(" "),t("p",[s._v("​\tC++定义函数时可以给形参指定一个默认的值，这样调用函数时如果没有给这个形参赋值（没有对应的实参），那么就使用这个默认的值。也就是说，调用函数时可以省略有默认值的参数。如果用户指定了参数的值，那么就使用用户指定的值，否则使用参数的默认值。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//带默认参数的函数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'@'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    cout"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('", "')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('", "')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//为所有参数传值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'#'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//为n、b传值，相当于调用func(20, 9.8, '@')")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//只为n传值，相当于调用func(30, 1.2, '@')")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("blockquote",[t("p",[s._v("注意：")]),s._v(" "),t("ul",[t("li",[s._v("默认参数除了使用数值常量指定，也可以使用表达式指定")]),s._v(" "),t("li",[s._v("C++规定，默认参数只能放在形参列表的最后，而且一旦为某个形参指定了默认值，那么它后面的所有形参都必须有默认值。")])])]),s._v(" "),t("h2",{attrs:{id:"_3-函数重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-函数重载"}},[s._v("#")]),s._v(" 3.函数重载")]),s._v(" "),t("p",[s._v("​\t在实际开发中，有时候我们需要实现几个功能类似的函数，只是有些细节不同。例如希望交换两个变量的值，这两个变量有多种类型，可以是 "),t("code",[s._v("int、float、char、bool")]),s._v(" 等，我们需要通过参数把变量的地址传入函数内部。在C语言中，程序员往往需要分别设计出三个不同名的函数，其函数原型与下面类似：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//交换 int 变量的值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//交换 float 变量的值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//交换 char 变量的值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bool "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" bool "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//交换 bool 变量的值")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("​\t但在C++中，这完全没有必要。C++ 允许多个函数拥有相同的名字，只要它们的"),t("strong",[s._v("参数列表")]),s._v("不同就可以，这就是函数的重载（Function Overloading）。借助重载，一个函数名可以有多种用途。")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("参数列表")]),s._v("又叫参数签名，包括参数的类型、参数的个数和参数的顺序，只要有一个不同就叫做参数列表不同。")])]),s._v(" "),t("p",[s._v("函数的重载的规则：")]),s._v(" "),t("ul",[t("li",[s._v("函数名称必须相同。")]),s._v(" "),t("li",[s._v("参数列表必须不同（个数不同、类型不同、参数排列顺序不同等）。")]),s._v(" "),t("li",[s._v("函数的返回类型可以相同也可以不相同。")]),s._v(" "),t("li",[s._v("仅仅返回类型不同不足以成为函数的重载。")])]),s._v(" "),t("h2",{attrs:{id:"_4-函数重载优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-函数重载优先级"}},[s._v("#")]),s._v(" 4.函数重载优先级")]),s._v(" "),t("p",[s._v("C++ 标准规定，在进行重载决议时编译器应该按照下面的优先级顺序来处理实参的类型：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("优先级")]),s._v(" "),t("th",[s._v("包含的内容")]),s._v(" "),t("th",[s._v("举例说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[s._v("精确匹配")])]),s._v(" "),t("td",[s._v("不做类型转换，直接匹配")]),s._v(" "),t("td",[s._v("（暂无说明）")])]),s._v(" "),t("tr",[t("td"),s._v(" "),t("td",[s._v("只是做微不足道的转换")]),s._v(" "),t("td",[s._v("从数组名到数组指针、从函数名到指向函数的指针、从非 "),t("code",[s._v("const")]),s._v("类型到 "),t("code",[s._v("const")]),s._v(" 类型。")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("类型提升后匹配")])]),s._v(" "),t("td",[s._v("整型提升")]),s._v(" "),t("td",[s._v("从"),t("code",[s._v("bool")]),s._v("、"),t("code",[s._v("char")]),s._v("、"),t("code",[s._v("short")]),s._v(" 提升为"),t("code",[s._v("int")]),s._v("，或者从 "),t("code",[s._v("char16_t")]),s._v("、"),t("code",[s._v("char32_t")]),s._v("、"),t("code",[s._v("wchar_t")]),s._v(" 提升为"),t("code",[s._v("int")]),s._v("、"),t("code",[s._v("long")]),s._v("、"),t("code",[s._v("long long")]),s._v("。")])]),s._v(" "),t("tr",[t("td"),s._v(" "),t("td",[s._v("小数提升")]),s._v(" "),t("td")]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("使用自动类型转换后匹配")])]),s._v(" "),t("td",[s._v("整型转换")]),s._v(" "),t("td",[s._v("从 char 到 long、short 到 long、int 到 short、long 到 char。")])]),s._v(" "),t("tr",[t("td"),s._v(" "),t("td",[s._v("小数转换")]),s._v(" "),t("td",[s._v("从 double 到 float。")])]),s._v(" "),t("tr",[t("td"),s._v(" "),t("td",[s._v("整数和小数转换")]),s._v(" "),t("td",[s._v("从 int 到 double、short 到 float、float 到 int、double 到 long。")])]),s._v(" "),t("tr",[t("td"),s._v(" "),t("td",[s._v("指针转换")]),s._v(" "),t("td",[s._v("从 int * 到 void *。")])])])]),s._v(" "),t("p",[s._v("​\tC++ 标准还规定，编译器应该按照从高到低的顺序来搜索重载函数，首先是精确匹配，然后是类型提升，最后才是类型转换；一旦在某个优先级中找到唯一的一个重载函数就匹配成功，不再继续往下搜索。")]),s._v(" "),t("p",[s._v("​\t如果在一个优先级中找到多个（两个以及以上）合适的重载函数，编译器就会陷入两难境地，不知道如何抉择，编译器会将这种模棱两可的函数调用视为一种错误，因为这些合适的重载函数同等“优秀”，没有一个脱颖而出，调用谁都一样。这就是函数重载过程中的二义性错误。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：类型提升和类型转换不是一码事！类型提升是积极的，是为了更加高效地利用计算机硬件，不会导致数据丢失或精度降低；而类型转换是不得已而为之，不能保证数据的正确性，也不能保证应有的精度。类型提升只有上表中列出的几种情况，其他情况都是类型转换。")])]),s._v(" "),t("h1",{attrs:{id:"六-extern与extern-c"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-extern与extern-c"}},[s._v("#")]),s._v(" 六."),t("code",[s._v("extern")]),s._v("与"),t("code",[s._v('extern "c"')])]),s._v(" "),t("h2",{attrs:{id:"_1-关键字extern"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-关键字extern"}},[s._v("#")]),s._v(" 1.关键字extern")]),s._v(" "),t("p",[s._v("利用关键字"),t("code",[s._v("extern")]),s._v("，根据作用域不同，大概有两种作用：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("1.引用同一文件中的变量")]),s._v(" "),t("blockquote",[t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extern")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("因为变量"),t("code",[s._v("num")]),s._v("在main函数后面，如果按照过程（顺序）执行的话，计算机不会知道"),t("code",[s._v("num")]),s._v("的值，使用"),t("code",[s._v("extern int num;")]),s._v("后可以告诉计算机存在这个值，往后面找.")])])]),s._v(" "),t("li",[t("p",[s._v("2.引用同一项目下另一文件的变量或函数：结合"),t("code",[s._v("const")]),s._v("修饰全局变量理解。")])])]),s._v(" "),t("h2",{attrs:{id:"_2-extern-c"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-extern-c"}},[s._v("#")]),s._v(' 2.extern "c"')]),s._v(" "),t("p",[s._v("​\t如果你在编写项目的过程中，使用的是C和C++混合编程，考虑到对函数名的处理方式不同，势必会造成编译器在程序链接阶段无法找到函数具体的实现，导致链接失败。为了避免函数以不同的编译方式处理，我们应该使其在"),t("code",[s._v("main.cpp")]),s._v("文件中仍以 C 语言代码的方式处理，这样就可以解决函数名不一致的问题。")]),s._v(" "),t("p",[s._v("​\t"),t("code",[s._v("extern")]),s._v("是 C 和 C++ 的一个关键字，但对于 "),t("code",[s._v('extern "C"')]),s._v("，我们大可以将其看做一个整体，和"),t("code",[s._v("extern")]),s._v(" 毫无关系。")]),s._v(" "),t("p",[s._v("​\t"),t("code",[s._v('extern "C"')]),s._v(" 既可以修饰一句 C++ 代码，也可以修饰一段 C++ 代码，它的功能是让编译器以处理 C 语言代码的方式来处理修饰的 C++ 代码。")])])}),[],!1,null,null,null);t.default=e.exports}}]);